/*
1928. Minimum Cost to Reach Destination in Time
Hard
Topics
Companies
Hint

There is a country of n cities numbered from 0 to n - 1 where all the cities are connected by bi-directional roads. The roads are represented as a 2D integer array edges where edges[i] = [xi, yi, timei] denotes a road between cities xi and yi that takes timei minutes to travel. There may be multiple roads of differing travel times connecting the same two cities, but no road connects a city to itself.

Each time you pass through a city, you must pay a passing fee. This is represented as a 0-indexed integer array passingFees of length n where passingFees[j] is the amount of dollars you must pay when you pass through city j.

In the beginning, you are at city 0 and want to reach city n - 1 in maxTime minutes or less. The cost of your journey is the summation of passing fees for each city that you passed through at some moment of your journey (including the source and destination cities).

Given maxTime, edges, and passingFees, return the minimum cost to complete your journey, or -1 if you cannot complete it within maxTime minutes.



Example 1:

Input: maxTime = 30, edges = [[0,1,10},{1,2,10},{2,5,10},{0,3,1},{3,4,10},{4,5,15]], passingFees = [5,1,2,20,20,3]
Output: 11
Explanation: The path to take is 0 -> 1 -> 2 -> 5, which takes 30 minutes and has $11 worth of passing fees.

Example 2:

Input: maxTime = 29, edges = [[0,1,10},{1,2,10},{2,5,10},{0,3,1},{3,4,10},{4,5,15]], passingFees = [5,1,2,20,20,3]
Output: 48
Explanation: The path to take is 0 -> 3 -> 4 -> 5, which takes 26 minutes and has $48 worth of passing fees.
You cannot take path 0 -> 1 -> 2 -> 5 since it would take too long.

Example 3:

Input: maxTime = 25, edges = [[0,1,10},{1,2,10},{2,5,10},{0,3,1},{3,4,10},{4,5,15]], passingFees = [5,1,2,20,20,3]
Output: -1
Explanation: There is no way to reach city 5 from city 0 within 25 minutes.



Constraints:

    1 <= maxTime <= 1000
    n == passingFees.length
    2 <= n <= 1000
    n - 1 <= edges.length <= 1000
    0 <= xi, yi <= n - 1
    1 <= timei <= 1000
    1 <= passingFees[j] <= 1000
    The graph may contain multiple edges between two nodes.
    The graph does not contain self loops.


*/

#include <iostream>
#include <cassert>
#include <algorithm>
#include <vector>
#include <map>
#include <queue>
#include <set>

#include <numeric>
#include <chrono>
#include <string_view>
#include <ranges>

#include "log.h"

using namespace std;

/****************************************************************************/

#include <ranges>

#ifndef __DEBUG_LOG
#define LOG(x)
#define VLOG(x)
#endif

#define INVALID -1
#define RESULT_MOD 1000000007
#define MY_MAX_VAL INT32_MAX

int InputID = 1;

struct Input
{
    int id;
    int maxTime;
    vector<vector<int>> edges;
    vector<int> passingFees;
    Input(int maxTime, vector<vector<int>> edges, vector<int> passingFees) : maxTime(maxTime), edges(edges), passingFees(passingFees) {
        id = InputID++;
    }
};
typedef int OUTPUT_TYPE;

struct Data {
};

typedef int NODE_ID;
typedef int TRAVEL_TIME;
typedef int TOLL_FEES;

struct Node;

struct Edge {
    NODE_ID to;
    TRAVEL_TIME time;

    Edge(NODE_ID to, TRAVEL_TIME time) : to(to), time(time) {
    }
    Edge(const Edge& e) : to(e.to), time(e.time) {
    }
    bool operator <(const Edge& rhs) const
    {
        return time < rhs.time;
    }
};

struct Node {

    NODE_ID id;
    TOLL_FEES fees;
    map<NODE_ID, TRAVEL_TIME> edges;

    Node() : id(INVALID), fees(0) {
    }
    void InitNode(int id, TOLL_FEES fees) {
        this->id = id;
        this->fees = fees;
    }
    void AddEdge(Node& to, TRAVEL_TIME tt) {
        edges[to.id] = tt;
    }
};
struct Trace {
    TRAVEL_TIME time;
    TOLL_FEES fees;
    NODE_ID tail;
    vector<NODE_ID> path;

    Trace(TRAVEL_TIME time = 0, TOLL_FEES fees = 0) : time(time), fees(fees), tail(INVALID) {
    }
    Trace(const Trace& trace) : time(trace.time), fees(trace.fees), tail(trace.tail) {
        path = trace.path;
    }

    bool operator <(const Trace& rhs) const
    {
        if (fees != rhs.fees)
            return fees < rhs.fees;

        return time < rhs.time;
    }

    void AddPath(NODE_ID tail, TOLL_FEES fees, TRAVEL_TIME time) {
        this->tail = tail;
        this->time += time;
        this->fees += fees;
        path.push_back(tail);
    }
};

ostream& operator<<(ostream& out, const Data& data);
ostream& operator<<(ostream& out, const Input& nums);

ostream& operator<<(ostream& out, const Edge& e) {
    out << "E:{to:" << e.to << ", time:" << e.time << "} ";
    return out;
}

ostream& operator<<(ostream& out, const Node& n) {
    out << "N:{id:" << n.id << ", fees:" << n.fees << ", edges:" << n.edges.size() << "} ";
    return out;
}

ostream& operator<<(ostream& out, const Trace& trace) {
    out << "T:{time:" << trace.time << ", fees:" << trace.fees << ", tail:" << trace.tail << "} ";
    return out;
}

class Solution {
public:

    vector<Node> mGraph;

    NODE_ID source;
    NODE_ID target;

    TRAVEL_TIME mMaxTime;
    TOLL_FEES mResult;

    int minCost(int maxTime, vector<vector<int>>& edges, vector<int>& passingFees) {

        source = 0;
        target = passingFees.size() - 1;

        this->mMaxTime = maxTime;
        mResult = MY_MAX_VAL;

        mGraph.resize(passingFees.size());

        for (size_t i = 0; i < passingFees.size(); i++) {
            mGraph[i].InitNode(i, passingFees[i]);
        }

        for (auto& e : edges) {
            auto edgeTime = e[2];
            if (edgeTime > mMaxTime)
                continue;

            Node& n1 = mGraph[e[0]];
            Node& n2 = mGraph[e[1]];
            n1.AddEdge(n2, edgeTime);
            n2.AddEdge(n1, edgeTime);
        }

        LOG("target node:" << target << " edges:" << mGraph[target].edges << endl);

        Trace zero;
        zero.AddPath(source, mGraph[source].fees, 0);
        //zero.AddPath(source, 0, 0);
        map<Trace, bool> pq;
        pq[zero] = true;

        vector<TRAVEL_TIME> visited(passingFees.size(), MY_MAX_VAL);
        visited[source] = 0;

        while (!pq.empty()) {

            auto itr = pq.begin();
            auto trace = itr->first;
            pq.erase(itr);

            if (trace.fees > mResult)
                continue;

            LOG("Processing " << trace << "qsize:" << pq.size());

            for (auto& e : mGraph[trace.tail].edges) {
                Node& n = mGraph[e.first];
                TRAVEL_TIME newtime = trace.time + e.second;
                TOLL_FEES newfees = trace.fees + n.fees;

                if (newtime > mMaxTime || newfees > mResult)
                    continue;

                Trace next(trace);
                next.AddPath(n.id, n.fees, e.second);

                if (next.tail == target) {
                    LOG("found:" << next << " vs:" << mResult);
                    LOG("path:" << next.path << endl);
                    mResult = min(mResult, next.fees);
                    continue;
                }

                if (1 || newtime < visited[n.id]) {
                    //LOG("\tAdd2Path:" << next << " - " << n);
                    pq[next] = true;
                    visited[n.id] = newtime;
                }
                else {
                    LOG("\tSkip: " << next << " v:" << visited[n.id] << " nt:" << newtime);
                }
            }
        }

        if (mResult == MY_MAX_VAL)
            return -1;
        return mResult;
    }

    OUTPUT_TYPE ProxyFunction(Input& nums) {
        return minCost(nums.maxTime, nums.edges, nums.passingFees);
    }
};

/****************************************************************************/

ostream& operator<<(ostream& out, const Input& nums) {
    out << " id:" << nums.id;
    out << " maxTime:" << nums.maxTime;
    out << " edges:" << nums.edges;
    out << " passingFees:" << nums.passingFees;
    return out;
}

ostream& operator<<(ostream& out, const Data& d) {
    return out;
}

/****************************************************************************/

#define TEXT_LOG_PREFIX "___________\t"

void test1(int testID)
{
    vector<Input> nums;
    vector<OUTPUT_TYPE> expected;


    nums.push_back(Input(30,
        { {0, 1, 10},{1, 2, 10},{2, 5, 10},{0, 3, 1},{3, 4, 10},{4, 5, 15} },
        { 5, 1, 2, 20, 20, 3 }));
    expected.push_back(11);

    nums.push_back(Input(29,
        { {0, 1, 10},{1, 2, 10},{2, 5, 10},{0, 3, 1},{3, 4, 10},{4, 5, 15} },
        { 5, 1, 2, 20, 20, 3 }));
    expected.push_back(48);

    nums.push_back(Input(25,
        { {0, 1, 10},{1, 2, 10},{2, 5, 10},{0, 3, 1},{3, 4, 10},{4, 5, 15} },
        { 5, 1, 2, 20, 20, 3 }));
    expected.push_back(-1);

    nums.push_back(Input(100, { {0,1,100} }, { 2,5 }));
    expected.push_back(7);

    nums.push_back(Input(500,
        { { 9,7,18},{26,3,12},{28,45,33},{47,10,27},{34,18,38},{32,13,39},{32,26,32},{12,0,2},{4,1,7},{5,3,2},{39,25,27},{45,10,34},{3,19,5},{25,32,23},{30,10,47},{37,2,31},{10,32,15},{23,14,19},{22,6,14},{45,39,38},{39,21,30},{42,17,42},{20,17,15},{24,0,27},{2,46,11},{2,24,13},{36,22,30},{2,1,31},{41,35,45},{4,19,20},{32,27,33},{38,46,1},{21,11,15},{33,41,2},{45,18,30},{8,33,50},{37,11,6},{25,17,42},{45,39,33},{7,4,49},{17,42,36},{36,16,9},{46,25,24},{43,4,6},{35,13,28},{1,28,1},{34,35,15},{38,1,15},{16,6,28},{13,0,42},{3,30,24},{43,27,35},{8,0,45},{27,20,47},{6,16,47},{0,34,35},{0,35,3},{40,11,24},{1,0,49},{44,20,32},{26,12,17},{3,2,25},{37,25,42},{27,1,15},{36,25,38},{24,47,33},{33,28,15},{25,43,37},{47,31,47},{29,10,50},{11,1,21},{29,3,48},{1,25,10},{48,17,16},{19,24,22},{30,7,2},{11,22,19},{20,42,41},{27,3,48},{17,0,34},{19,14,32},{49,2,20},{10,3,38},{0,49,13},{6,3,28},{42,23,6},{14,8,1},{35,16,3},{17,7,40},{18,7,49},{36,35,13},{14,40,45},{16,33,11},{31,22,33},{38,15,48},{15,14,25},{37,13,37},{44,32,7},{48,1,31},{33,12,20},{22,26,23},{4,10,11},{43,28,43},{19,8,14},{35,31,33},{28,27,19},{40,11,36},{36,43,28},{22,21,15} },
        { 199,505,107,961,682,400,304,517,512,18,334,627,893,412,922,289,19,161,206,879,336,831,577,802,139,348,440,219,273,691,99,858,389,955,561,353,937,904,858,704,548,497,787,546,241,67,743,42,87,137 }));
    expected.push_back(336);

    nums.push_back(Input(500,
        { {31,36,19},{5,19,32},{2,17,40},{13,25,4},{9,18,31},{10,40,19},{34,43,46},{7,44,42},{7,37,2},{37,44,43},{27,9,36},{20,31,44},{36,25,16},{20,49,31},{17,13,18},{30,13,25},{18,22,50},{1,0,44},{15,19,21},{14,38,48},{31,11,31},{43,9,2},{6,34,25},{38,23,3},{42,8,12},{47,29,18},{15,49,1},{40,11,26},{48,11,39},{32,30,37},{34,26,16},{46,22,15},{14,34,45},{15,22,42},{35,13,31},{5,4,46},{12,27,5},{13,27,16},{49,13,2},{7,42,42},{46,9,5},{2,40,24},{20,16,9},{10,11,25},{17,22,50},{42,23,27},{41,42,35},{13,39,10},{28,11,36},{47,3,33},{24,42,50},{26,29,22},{48,7,33},{42,39,25},{33,8,46},{45,43,20},{43,20,39},{6,27,4},{4,6,50},{49,11,15},{30,44,21},{30,19,5},{3,11,34},{41,7,16},{37,33,9},{2,1,21},{5,46,7},{10,32,14},{4,43,12},{37,27,40},{6,8,15},{1,23,9},{1,15,43},{20,34,41},{17,11,50},{39,48,4},{46,9,11},{24,0,3},{21,9,17},{32,30,39},{37,4,32},{16,14,12},{35,42,18},{26,17,50},{7,37,9},{45,37,22},{30,29,42},{7,34,47},{9,29,7},{43,24,6},{13,18,15},{10,34,11},{45,8,18},{45,1,5},{17,9,28},{37,35,18},{42,15,5},{37,6,26},{0,14,49},{12,44,33},{35,45,21},{21,26,2},{32,42,26},{36,48,26},{35,7,50},{9,15,16},{4,2,11},{47,45,29},{41,4,13},{38,25,31},{10,38,9},{23,41,23},{9,37,10},{29,18,38},{45,25,25},{22,20,26},{28,9,15},{41,40,32},{24,8,19},{25,0,25},{6,28,46},{8,35,46},{25,7,46},{21,11,37},{14,28,21},{3,1,24},{33,24,31},{24,26,7},{39,47,31},{0,24,36},{21,48,24},{37,7,3},{15,46,3},{24,20,49},{5,39,17},{8,1,23},{3,28,42},{1,19,30},{41,22,39},{34,39,15},{13,28,19},{28,21,48},{7,3,13},{23,48,36},{5,8,19},{25,0,35},{25,22,48},{2,37,33},{2,33,13},{40,5,35},{13,45,30},{1,18,40},{2,39,12},{23,8,20},{3,22,8},{6,43,21},{11,3,24},{3,47,47},{10,19,37},{20,23,14},{7,0,39},{10,3,40},{34,27,29},{29,25,46},{22,33,48},{11,47,40},{10,15,35},{42,39,28},{37,23,4},{37,5,1},{48,2,32},{13,5,33},{49,11,35},{27,0,20},{41,7,23},{1,35,4},{9,22,9},{20,25,45},{19,47,46},{11,12,15},{42,18,49},{19,1,5},{28,23,48},{42,4,36},{48,12,11},{32,44,2},{49,39,15},{45,39,34},{11,8,1},{26,43,36},{32,31,39},{49,42,47},{9,13,24},{30,40,2},{17,32,12},{35,40,22},{43,2,13},{23,32,23},{48,22,13},{6,24,4},{48,5,41},{18,3,5},{46,37,21},{13,29,42},{22,44,37},{3,24,6},{21,4,42},{37,32,8},{38,42,27},{30,1,28},{6,21,22},{33,21,38},{12,42,47},{13,32,33},{35,33,20},{37,1,33},{27,39,14},{10,9,1},{40,45,48},{6,32,9},{30,44,16},{36,42,20},{11,32,23},{16,19,1},{21,11,39},{45,9,23},{11,48,22},{33,23,38},{8,45,1},{40,33,28},{30,10,18},{5,25,33},{34,4,16},{34,21,22},{35,22,9},{34,7,35},{4,9,43},{48,25,36},{34,4,36},{13,12,11},{49,46,40},{49,34,41},{32,27,16},{25,41,39},{22,6,26},{34,0,11},{42,11,22},{40,14,16},{23,19,19},{4,36,26},{23,48,29},{38,32,13},{16,33,28},{46,23,23},{2,47,19},{13,6,48},{10,31,24},{17,2,41},{33,37,3},{17,39,31},{32,28,14},{3,7,28},{45,4,50},{43,33,20},{35,45,28},{41,47,17},{36,25,8},{32,40,6},{27,24,46},{11,29,50},{9,7,29},{11,30,29},{37,16,47},{19,12,39},{36,41,20},{15,44,32},{13,0,44},{23,26,26},{23,20,26},{38,8,44},{15,5,48},{11,0,25},{32,15,40},{30,32,2},{35,2,46},{32,6,11},{39,3,40},{20,9,39},{9,10,15},{45,14,7},{20,32,27},{36,33,46},{27,0,23},{7,25,22},{25,40,3},{22,3,38},{44,42,46},{16,35,3},{5,32,20},{34,12,50},{43,9,44},{28,21,33},{34,47,4},{38,34,17},{23,49,4},{24,27,4},{30,3,36},{1,41,5},{38,20,37},{9,6,45},{32,19,14},{15,21,22},{42,40,37},{21,32,32},{4,2,34},{30,2,34},{39,12,15},{46,17,30},{47,22,5},{20,31,45},{21,48,46},{49,34,36},{29,32,36},{37,39,45},{17,13,15},{39,3,37},{12,38,16},{23,32,18},{0,9,9},{4,19,37},{25,24,27},{44,39,42},{37,32,31},{45,5,22},{47,36,42},{32,6,9},{31,30,1},{37,41,19},{12,10,9},{10,21,9},{35,1,30},{23,21,17},{33,10,37},{21,10,37},{27,45,16},{23,22,45},{9,43,21},{13,24,43},{44,36,29},{18,36,40},{2,39,16},{33,8,3},{23,13,4},{24,42,33},{18,11,27},{9,8,11},{34,22,11},{44,30,22},{23,6,7},{48,42,45},{20,21,19},{21,3,31},{41,12,39},{23,42,38},{5,39,32},{37,31,3},{23,12,15},{27,16,49},{30,35,3},{41,46,37},{44,18,27},{17,36,30},{1,36,12},{34,9,15},{10,17,27},{23,27,36},{36,42,36},{38,46,45},{46,9,4},{28,36,7},{9,24,28},{49,48,33},{9,18,2},{17,26,9},{30,34,39},{18,11,7},{37,27,6},{16,39,4},{33,1,37},{12,48,37},{26,14,39},{4,42,42},{35,46,42},{28,31,25},{48,24,27},{37,13,19},{20,21,20},{34,30,37},{31,7,33},{48,49,5},{5,30,22},{9,4,43},{33,15,7},{27,35,20},{12,5,41},{14,4,40},{44,11,49},{35,6,42},{26,12,45},{3,1,48},{28,31,11},{10,8,29},{14,18,45},{7,4,14},{14,8,7},{17,34,20},{29,41,41},{3,0,3},{29,18,1},{41,5,9},{5,28,13},{49,21,38},{16,13,39},{19,10,34},{39,32,20},{26,29,24},{31,34,19},{23,31,42},{13,25,47},{27,15,32},{15,31,33},{31,11,29},{40,27,27},{16,22,25},{22,1,42},{31,2,11},{31,4,33},{6,3,21},{11,39,29},{15,7,2},{22,6,13},{10,42,43},{37,15,48},{4,38,50},{20,34,24},{33,19,15},{42,26,26},{37,35,34},{22,23,24},{7,27,10},{6,4,44},{11,14,20},{8,2,18},{25,44,25},{42,15,44},{24,26,34},{12,3,24},{28,34,29},{24,30,2},{1,39,1},{6,3,26},{38,11,13},{46,23,1},{2,46,41},{32,40,43},{48,40,15},{17,39,5},{25,34,8},{42,38,2},{25,28,10},{37,20,28},{29,2,29},{43,21,29},{25,17,23},{27,23,36},{15,40,41},{20,1,12},{0,16,49},{35,32,15},{14,42,12},{45,13,4},{36,8,36},{1,13,21},{28,12,12},{41,32,48},{22,28,7},{29,47,31},{26,4,17},{37,11,21},{39,12,35},{5,33,12},{20,14,4},{2,33,47},{16,14,13},{30,34,3},{33,29,13},{40,15,17},{32,24,34},{38,22,17},{5,26,10},{45,31,26},{19,5,29},{20,14,21},{34,19,9},{19,41,38},{46,19,48},{11,20,10},{34,4,16},{1,29,26},{5,46,24},{16,15,14},{29,8,45},{44,19,3},{21,3,30},{43,47,37},{17,31,7},{43,39,20},{44,40,10},{31,45,29},{5,1,25},{12,17,19},{14,18,46},{15,35,45},{48,11,14},{7,2,8},{28,34,4},{41,30,43},{22,29,49},{23,16,20},{41,22,48},{19,37,48},{12,20,23},{23,21,42},{25,34,28},{17,46,27},{20,26,8},{2,46,13},{28,2,22},{47,21,44},{15,27,11},{33,6,17},{44,15,41},{20,10,18},{46,15,14},{32,10,9},{25,49,30},{15,44,50},{41,24,23},{29,22,15},{25,29,40},{36,44,13},{8,9,1},{48,9,9},{13,12,5},{45,18,7},{31,1,7},{28,14,18},{20,42,48},{3,20,11},{30,4,49},{29,8,37},{30,46,37},{38,16,44},{7,36,42},{0,45,8},{20,38,8},{28,32,27},{1,41,45},{8,28,26},{32,34,39},{12,31,18},{26,4,34},{37,3,14},{17,33,13},{34,21,16},{46,16,49},{38,39,41},{20,24,14},{38,21,15},{28,10,38},{35,20,18},{29,4,13},{30,3,48},{35,10,45},{2,23,37},{3,23,32},{3,6,39},{36,31,18},{37,6,40},{28,15,45},{24,42,31},{16,19,32},{9,31,8},{46,35,48},{0,2,28},{26,0,19},{36,14,40},{7,11,25},{3,49,21},{36,33,1},{43,8,38},{46,20,29},{35,37,30},{49,28,39},{38,48,3},{23,9,17},{4,49,28},{44,33,18},{6,17,47},{25,29,8},{3,27,47},{36,17,12},{25,34,14},{30,23,2},{8,40,7},{25,3,38},{44,0,47},{37,12,38},{5,28,42},{36,2,46},{5,39,16},{7,27,41},{26,47,11},{27,23,15},{4,8,50},{14,11,20},{32,9,21},{2,0,31},{41,17,47},{29,9,24},{4,37,35},{43,44,14},{27,8,22},{47,2,28},{19,24,1},{40,0,1},{29,21,40},{7,5,48},{0,21,8},{18,9,10},{36,0,13},{12,27,29} },
        { 274,630,138,293,592,832,255,72,877,611,272,59,956,23,443,626,989,290,864,487,433,447,861,829,70,190,220,787,696,35,954,653,844,776,440,977,870,425,364,964,364,524,933,152,184,809,232,235,830,965 }));
    expected.push_back(1158);

    cout << endl << TEXT_LOG_PREFIX << "test : " << testID << " - (" << nums.size() << ") " << endl;

#if defined(__DEBUG_LOG) && __DEBUG_LOG == __DEBUG_LOG_VB
    for (size_t i = nums.size() - 1; i < nums.size(); i++)
#else
    for (size_t i = 0; i < nums.size(); i++)
#endif
    {
        cout << TEXT_LOG_PREFIX << "\ttest for: loop: [" << i << "] => " << nums[i] << endl;
        Solution s;
        auto result = s.ProxyFunction(nums[i]);
        cout << TEXT_LOG_PREFIX << "\t loop: " << i << " ==> " << result << " vs " << expected[i] << endl;

        assert(result == expected[i]);
    }
}

void test2(int testID)
{

    cout << TEXT_LOG_PREFIX << "test" << testID << endl;
    vector<Input> nums;
    vector<OUTPUT_TYPE> expected;

    nums.push_back(Input(24,
        { {27,8,37},{9,36,15},{15,8,13},{30,8,12},{21,4,30},{22,33,46},{27,29,10},{35,32,35},{22,39,34},{9,45,14},{26,21,44},{13,36,14},{3,49,20},{28,44,11},{15,30,5},{26,49,36},{8,40,3},{28,25,1},{41,46,48},{38,24,8},{30,7,39},{14,3,36},{2,19,21},{12,39,37},{16,3,47},{11,31,22},{38,25,34},{42,6,47},{14,20,21},{33,8,35},{17,5,2},{36,19,3},{47,28,40},{37,33,35},{24,47,40},{7,15,26},{8,0,13},{40,34,10},{25,3,19},{44,9,5},{16,6,22},{34,35,39},{24,5,2},{3,22,16},{27,24,3},{35,5,29},{5,48,49},{12,22,8},{45,15,36},{2,35,36},{24,18,14},{24,49,3},{49,20,38},{41,24,25},{18,49,15},{24,4,23},{16,0,22},{41,46,34},{7,12,31},{9,5,13},{19,44,49},{8,25,8},{24,7,9},{4,33,38},{49,19,17},{11,31,19},{29,40,31},{30,29,10},{25,20,31},{38,28,18},{21,29,18},{18,46,19},{43,33,43},{22,15,19},{26,44,21},{9,13,13},{0,20,9},{11,9,12},{22,39,43},{43,47,29},{12,10,34},{49,36,41},{39,48,11},{9,27,13},{9,8,30},{18,49,39},{18,33,40},{35,22,28},{8,6,24},{14,41,10},{21,34,20},{37,6,2},{20,7,24},{11,10,29},{12,35,2},{22,41,9},{47,1,16},{29,2,38},{46,40,29},{32,47,10},{39,33,23},{24,17,3},{27,47,3},{28,10,37},{42,48,46},{48,24,20},{48,44,16},{34,47,28},{48,34,3},{12,23,39},{13,4,44},{0,33,39},{21,3,3},{45,14,38},{36,9,18},{19,3,37},{6,2,27},{29,40,37},{37,42,44},{10,14,10},{15,17,21},{35,12,14},{46,10,18},{41,0,47},{46,28,42},{13,19,25},{42,11,30},{27,14,47},{47,30,36},{13,43,4},{29,3,14},{36,16,40},{1,0,18},{18,6,1},{18,0,20},{24,38,37},{25,48,12},{34,12,27},{8,42,12},{40,4,5},{33,15,13},{40,14,43},{17,23,25},{7,3,12},{41,42,32},{7,11,4},{33,23,36},{3,25,7},{20,22,29},{19,18,21},{6,34,34},{21,31,9},{48,16,22},{14,0,7},{20,10,24},{5,6,44},{24,48,27},{4,39,1},{16,41,43},{2,27,1},{0,7,13},{6,2,30},{40,43,15},{35,39,44},{45,47,37},{29,28,40},{27,41,38},{43,48,49},{23,3,34},{48,43,10},{7,23,17},{4,9,44},{22,41,29},{42,13,33},{40,7,24},{23,21,8},{4,3,27},{7,22,42},{12,26,3},{38,23,3},{14,8,16},{35,26,31},{40,7,9},{4,13,4},{48,47,27},{18,27,2},{20,30,27},{7,32,32},{12,5,25},{47,41,25},{49,27,37},{9,43,4},{47,2,15},{14,47,24},{28,10,4},{36,2,11},{36,25,14},{17,5,38},{26,20,17},{25,40,5},{26,12,30},{29,19,24},{47,16,15},{4,19,27},{8,44,1},{13,41,44},{6,20,28},{44,13,35},{11,39,25},{6,8,19},{16,30,15},{36,43,25},{43,2,9},{34,42,46},{13,18,45},{48,27,36},{16,13,9},{48,27,9},{49,18,6},{41,5,50},{1,20,12},{27,13,40},{1,0,30},{48,28,14},{20,29,15},{14,23,27},{14,23,4},{3,48,18},{2,21,31},{18,43,31},{7,1,11},{25,23,24},{24,0,21},{2,1,38},{20,31,27},{8,38,50},{23,16,33},{22,28,19},{48,17,8},{22,6,22},{4,3,43},{35,4,40},{32,7,8},{46,37,49},{39,24,24},{36,9,25},{39,34,22},{10,28,24},{36,8,21},{23,30,36},{6,0,27},{35,39,47},{14,40,30},{16,24,32},{1,22,13},{0,40,32},{20,15,48},{28,16,2},{16,29,42},{24,19,1},{32,31,11},{4,29,4},{35,39,16},{46,12,38},{22,48,49},{28,12,47},{0,6,22},{39,44,14},{5,37,19},{43,33,33},{37,23,21},{13,8,50},{36,16,30},{9,24,30},{24,10,28},{12,42,11},{4,20,4},{6,44,31},{15,17,39},{14,30,36},{18,47,34},{18,30,28},{16,40,50},{30,3,24},{6,4,41},{7,11,6},{10,20,20},{16,43,18},{13,27,14},{18,1,33},{24,48,45},{2,48,21},{30,18,32},{18,42,17},{42,15,36},{36,7,6},{35,31,12},{13,31,45},{7,8,8},{39,29,12},{20,39,43},{14,42,5},{6,32,44},{11,4,21},{34,25,26},{28,29,28},{45,4,7},{12,2,5},{27,41,44},{44,34,11},{7,11,37},{31,16,13},{47,13,14},{5,34,6},{41,11,49},{48,11,20},{33,42,2},{18,5,21},{4,19,9},{38,46,26},{26,17,13},{19,41,49},{11,38,22},{2,21,11},{13,49,14},{21,9,36},{8,14,27},{45,9,14},{1,2,1},{38,4,35},{1,48,39},{1,18,50},{3,5,4},{47,3,37},{6,26,31},{49,22,46},{14,19,49},{11,33,34},{17,7,25},{30,14,31},{18,14,45},{29,2,45},{14,35,49},{10,37,28},{12,15,20},{34,0,45},{42,7,37},{41,15,16},{47,12,26},{0,30,11},{10,1,22},{16,36,16},{24,32,10},{24,22,50},{35,4,13},{45,10,41},{17,36,23},{2,48,14},{33,11,30},{6,22,27},{42,14,35},{22,4,17},{25,35,26},{49,18,13},{16,25,35},{41,20,12},{2,30,29},{12,11,12},{47,3,13},{2,10,34},{13,29,15},{37,34,44},{8,33,21},{42,37,49},{48,26,31},{18,44,23},{22,8,18},{34,37,30},{41,40,49},{17,41,11},{1,23,32},{5,1,48},{49,23,50},{40,49,32},{25,46,6},{43,30,37},{20,3,13},{5,46,49},{34,10,35},{42,48,38},{40,16,31},{49,43,16},{24,12,16},{2,0,36},{49,29,10},{16,37,37},{22,45,44},{42,21,35},{39,33,14},{9,3,2},{42,34,19},{35,46,24},{36,30,44},{17,2,34},{4,30,29},{28,15,28},{9,8,44},{36,42,46},{9,14,41},{40,23,3},{41,9,23},{42,47,29},{2,22,48},{22,44,32},{15,7,46},{11,28,4},{28,7,47},{14,39,21},{2,7,6},{1,9,12},{25,16,15},{44,10,48},{46,15,3},{7,3,32},{44,30,18},{27,10,46},{11,4,28},{49,15,15},{49,36,10},{36,15,39},{16,36,21},{11,21,29},{29,12,17},{29,31,24},{32,47,13},{3,4,17},{31,18,13},{11,33,6},{7,27,50},{7,3,40},{24,40,41},{47,25,42},{20,38,21},{42,25,10},{20,0,42},{31,19,6},{31,8,29},{3,19,10},{9,32,50},{15,17,40},{12,9,42},{16,28,25},{26,10,20},{19,0,42},{10,48,27},{47,1,33},{36,29,18},{38,36,38},{0,41,31},{17,27,23},{39,8,30},{47,37,5},{39,1,50},{39,25,21},{13,35,22},{0,22,8},{3,1,39},{11,7,3},{12,44,28},{33,13,27},{30,16,7},{36,45,31},{33,32,42},{33,1,15},{39,3,23},{48,6,12},{24,49,5},{13,46,22},{43,23,26},{24,15,46},{24,43,14},{0,14,31},{42,41,6},{14,47,6},{36,39,6},{24,18,45},{10,39,1},{17,25,22},{36,23,23},{10,23,42},{40,33,41},{41,28,13},{25,1,1},{10,45,19},{40,2,42},{14,42,40},{13,37,24},{29,38,32},{47,11,35},{24,4,45},{37,40,7},{29,45,37},{13,44,49 } },
        { 190,843,824,838,336,528,395,301,902,169,729,254,2,463,15,649,865,840,198,789,232,516,699,157,608,893,40,87,615,294,214,66,313,103,847,326,501,1000,65,35,622,905,15,571,808,444,866,11,182,657 }));
    expected.push_back(1158);



    cout << TEXT_LOG_PREFIX << "\ttest for: " << nums << endl;

    Solution s;
    auto starttime = std::chrono::high_resolution_clock::now();
    auto result = s.ProxyFunction(nums[0]);
    auto endtime = std::chrono::high_resolution_clock::now();
    cout << TEXT_LOG_PREFIX << "\ttest: " << testID << " ==> " << result << " vs " << expected[0] << endl;
    cout << TEXT_LOG_PREFIX << "Time: "
        << std::chrono::duration_cast<std::chrono::microseconds>(endtime - starttime).count() << "us "
        << std::chrono::duration_cast<std::chrono::milliseconds>(endtime - starttime).count() << "ms "
        << std::chrono::duration_cast<std::chrono::seconds>(endtime - starttime).count() << "s "
        << endl;

    assert(result == expected[0]);
}

int main()
{
    cout << "--- " << endl;
#if !defined(__DEBUG_LOG) || __DEBUG_LOG <= __DEBUG_LOG_VB
    test1(1);
#endif
#if defined(__DEBUG_LOG) && __DEBUG_LOG >= __DEBUG_LOG_VB
    test2(2);
#endif

    return 0;
}


